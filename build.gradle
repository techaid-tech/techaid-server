buildscript {
    ext {
        /*
         * Versions @ https://github.com/JetBrains/kotlin/releases
         * Pick versions suffixed with `-release`
         * More likely to be limited by the version of the all-open plugin @
         * https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-maven-allopen
         */
        kotlinVersion = '1.6.21'
        springBootVersion = '2.7.9'
        /*
        * Versions @ https://github.com/spring-projects/spring-boot/releases
        * Always pick versions suffixed with `.RELEASE`
        **/
        graphQLVersion = '5.7.3'
        queryDslVersion = '5.0.0'
    }
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.postgresql:postgresql:42.2.10")
    }
}

plugins {
    id 'idea'
    id 'jacoco'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.spring' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.jpa' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.kapt' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.allopen' version "${kotlinVersion}"
}

group = 'ju.ma'
version = '0.0.2-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    jcenter()
}

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=compatibility']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=all-compatibility']
        jvmTarget = '1.8'
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat "FULL"
    }

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled false
        csv.enabled false
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/alphasights/controllers/**",
                    "com/alphasights/app/model/Q*"
            ])
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                minimum = 0.5
            }
        }
    }
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',').collect{ it.trim() }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

     /* Security */
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    /* Gmail */
    implementation 'com.google.api-client:google-api-client:1.23.0'
    implementation 'com.google.apis:google-api-services-gmail:v1-rev83-1.23.0'
    implementation 'com.sun.mail:javax.mail:1.6.2'

    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'com.auth0:auth0:1.15.0'
    implementation 'com.auth0:mvc-auth-commons:1.+'
    implementation 'com.auth0:java-jwt:3.10.3'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE'

    implementation 'org.webjars:bootstrap:4.2.1'
    implementation 'org.webjars:font-awesome:4.7.0'

    /* Kotlin Dependencies */
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "io.github.microutils:kotlin-logging:1.6.26"

    /* Graphql */
    implementation "com.graphql-java-kickstart:graphql-spring-boot-starter:${graphQLVersion}"
    runtimeOnly "com.graphql-java-kickstart:graphiql-spring-boot-starter:${graphQLVersion}"
    runtimeOnly "com.graphql-java-kickstart:voyager-spring-boot-starter:${graphQLVersion}"
    testImplementation "com.graphql-java-kickstart:graphql-spring-boot-starter-test:${graphQLVersion}"

    /* Utility Dependencies */
    implementation "info.picocli:picocli-spring-boot-starter:4.0.2"

    /* Logging / Monitoring Dependencies */
    implementation 'net.logstash.logback:logstash-logback-encoder:6.3'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'com.datadoghq:dd-trace-api:0.44.0'
    implementation 'io.micrometer:micrometer-registry-datadog'

    /* Making use of JUnit 5 */
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    /* Hibernate / DB specific dependencies */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.flywaydb:flyway-core:6.3.0'
    implementation 'com.vladmihalcea:hibernate-types-52:2.9.8'
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"
    implementation 'com.github.alexliesenfeld:querydsl-jpa-postgres-json:0.0.7'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation 'javax.validation:validation-api:2.0.1.Final'
    kapt "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
    runtimeOnly 'org.postgresql:postgresql'
    /* Making use of embedded postgres db when running unit tests */
    testImplementation 'io.zonky.test:embedded-database-spring-test:1.5.3'
    /* Providing In-Memory H2 database as the default spring data-source */
    testImplementation 'com.h2database:h2:1.4.200'
}

idea {
    module {
        def kaptMain = file('build/generated/source/kapt/main')
        sourceDirs += kaptMain
        generatedSourceDirs += kaptMain
    }
}

kapt {
    correctErrorTypes true
}